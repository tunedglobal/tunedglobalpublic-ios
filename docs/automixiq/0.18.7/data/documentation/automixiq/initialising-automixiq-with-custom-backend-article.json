{"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Essentials","text":"Essentials","type":"heading","level":2},{"inlineContent":[{"text":"This document explains how to integrate AutomixIQ with your application you are using a custom backend to access tracks and metadata","type":"text"}],"type":"paragraph"},{"anchor":"Initialization-when-you-take-the-responsibility-of-providing-audio-data-and-metadata","text":"Initialization when you take the responsibility of providing audio data and metadata","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"In order to initialise AutomixIQ when you take the responsibility of providing audio data and metadata you need a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate"},{"type":"text","text":" and a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStatusObserverDelegate"},{"type":"text","text":", plus a store ID, applicationId and a country code:"}],"type":"paragraph"},{"code":["func application(_ application: UIApplication, ","                   didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {","    \/\/ ...","","    let automixIQStreamingDelegate: AutomixIQStreamingDelegate = myAutomixIQStreamingDelegate","    let automixIQStatusObserverDelegate: AutomixIQStatusObserverDelegate = myAutomixIQStatusObserverDelegate","    let countryCode: String = myCountryCode \/\/ \"US\" ? \"AU\"?","    let storeId: String = myTunedStoreId","    let applicationId: String = myApplicationId","    let myAPIKey: String = myApplicationKey","    let config = AutomixIQConfig(apiKey: myAPIKey, country: countryCode, storeId: storeId, applicationId: applicationId)","    AutomixIQ.initialise(config: config,","                         automixIQsSreamingDelegate:automixIQStreamingDelegate,","                         automixIQStatusDelegate:automixIQStatusObserverDelegate)","    { error in","        if error != nil {","            \/\/ This means you are forbidden to use the Automix SDK or you have no internet connection.","            return","        }","        \/\/ The Automix SDK public functions can be used from this point onwards :)","    }","","    \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"anchor":"AutomixIQStreamingDelegate","text":"AutomixIQStreamingDelegate","type":"heading","level":4},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If your custom backend puts fetching metadata and track data behind a login, AutomixIQ needs to know if the user in your application is logged in or not via"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/isLoggedIn()","type":"reference","isActive":true}]}]}],"type":"unorderedList"},{"code":["public class MyAutomixIQStreamingDelegate: NSObject, AutomixIQStreamingDelegate {","    \/\/ ...","    public func isLoggedIn() {","        return self.loggedIn","    }","    \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If your custom backend only allows playback on a device under certain conditions (for instance in only allows one device to play at any given time), AutomixIQ needs to know if a device is allowed to play via"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/asyncCheckDeviceStatus(completion:)","type":"reference"}],"type":"paragraph"}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["public class MyAutomixIQStreamingDelegate: NSObject, AutomixIQStreamingDelegate {","    \/\/ ...","    public func asyncCheckDeviceStatus(completion: @escaping (_ error: Error?, _ canContinuePlaying: Bool) -> Void) {","        self.canDeviceContinuePlaying() { allowedToPlay in","            return allowedToPlay","        }","    }","    \/\/ ...","}"]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"AutomixIQ requires devices to have a unique identifier, provided via"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/getDeviceIdentifier()","type":"reference","isActive":true}],"type":"paragraph"}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["public class MyAutomixIQStreamingDelegate: NSObject, AutomixIQStreamingDelegate {","    \/\/ ...","    public func getDeviceIdentifier() -> String {","        return self.deviceIdentifier","    }","    \/\/ ...","}"]},{"items":[{"content":[{"inlineContent":[{"text":"This provides hooks to inject cached track audio data and metadata, preventing AutomixIQ from having to request this data from your custom backend if they are already available. This also enables offline playback when all required data is available on the device","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"This is done via ","type":"text"},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/syncGetTrackMetadata(trackId:)","type":"reference","isActive":true}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public class MyAutomixIQStreamingDelegate: NSObject, AutomixIQStreamingDelegate {","    \/\/ ...","    public func syncGetTrackMetadata(trackId: String?) -> TunedTrackModel? {","        \/\/ If I have this track cached, I should be able to tell its metadata","        if self.isTrackCached(trackId) == false {","            return nil","        }","        return self.metadataForTrack(trackId)","    }","    \/\/ ...","}"]},{"inlineContent":[{"text":"and ","type":"text"},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/syncGetCachedTrack(trackId:)","type":"reference","isActive":true}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public class MyAutomixIQStreamingDelegate: NSObject, AutomixIQStreamingDelegate {","    \/\/ ...","    public func syncGetCachedTrack(trackId: String) -> Data? {","        \/\/ If I have this track cached, I should be able to decrypt it and send the data","        if self.isTrackCached(trackId) == false {","            return nil","        }","        return self.unencryptedDataForTrack(trackId)","    }","    \/\/ ...","}"]},{"inlineContent":[{"text":"AutomixIQ will pass every track metadata model it may have downloaded to the client to provide an opportunity to cache it. If you do not need this, you may leave this function empty.","type":"text"},{"text":" ","type":"text"},{"text":"``AutomixIQStreamingDelegate\/cacheMetadata(_:)`","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public class MyAutomixIQStreamingDelegate: NSObject, AutomixIQStreamingDelegate {","    \/\/ ...","    public func cacheMetadata(_ metadata: [TunedTrackModel]) -> Data? {","        self.metadataForTrack[metadata.trackId] = metadata","    }","    \/\/ ...","}"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"AutomixIQ will download track metadata as it needs it. When required, it will do so via"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/asyncGetTrackMetadata(trackId:completion:)","type":"reference","isActive":true}]}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["public class MyAutomixIQStreamingDelegate: NSObject, AutomixIQStreamingDelegate {","    \/\/ ...","    public func asyncGetTrackMetadata(trackId: String, completion: @escaping (_ error: Error?, _ track: TunedTrackModel?) -> Void) {","        self.getTrackMetadata(trackId: trackId) { error, trackMetadata in","            let automixIQTrackModel = translateMetadata(trackMetadata)","            return completion(error, automixIQTrackModel)","        }","    }","    \/\/ ...","}"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"When AutomixIQ needs to download a track, it will ask for the url for it. It supports session IDs if you want urls to expire and return 403s. It will do so via","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/asyncGetStream(streamingDeviceId:sessionId:trackId:completion:)"}]}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["public class MyAutomixIQStreamingDelegate: NSObject, AutomixIQStreamingDelegate {","    \/\/ ...","    public func asyncGetStream(streamingDeviceId: String, sessionId: String, trackId: String, completion: @escaping (_ error: Error?, _ url: String?, _ newSessionId: String?, _ reportingURLS: Beacons?) -> Void) {","        self.getTrackURL(deviceId: streamingDeviceId, sessionId: sessionId, trackId: trackId) { error, url in ","            return completion(error, url)","        }","    }","    \/\/ ...","}"]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"When a track finishes downloading, AutomixIQ will pass the audio data for you to cache if required. This is done via"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/trackDownloadCompleted(trackId:data:)","isActive":true}],"type":"paragraph"}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["public class MyAutomixIQStreamingDelegate: NSObject, AutomixIQStreamingDelegate {","    \/\/ ...","    public func trackDownloadCompleted(trackId: String, data: NSData) {","        self.cacheTrack(trackId: trackId, data: data)","    }","    \/\/ ...","}"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As a track is being downloaded, AutomixIQ will report download progress via"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/trackDownloadProgressChanged(trackId:progress:)","isActive":true}]}]}],"type":"unorderedList"},{"syntax":"swift","code":["public class MyAutomixIQStreamingDelegate: NSObject, AutomixIQStreamingDelegate {","    \/\/ ...","    public func trackDownloadProgressChanged(trackId: String, progress: Swift.Float) {","        self.updateTrackDownloadProgress(trackId: trackId, progress: progress)","    }","    \/\/ ...","}"],"type":"codeListing"},{"inlineContent":[{"text":"Do keep in mind this download is done lazily, as AutomixIQ requires data for analysis \/ playback. There is no guarantee a track will download in its entirety if the track is not played in its entirety.","type":"text"}],"type":"paragraph"},{"level":4,"text":"AutomixIQStatusObserverDelegate","anchor":"AutomixIQStatusObserverDelegate","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStatusObserverDelegate"},{"text":" is responsible for updating your player’s UI, please refer to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/Updating-custom-player's-UI-article"}],"type":"paragraph"},{"level":3,"text":"Checking if AutomixIQ is initialised","anchor":"Checking-if-AutomixIQ-is-initialised","type":"heading"},{"inlineContent":[{"type":"text","text":"To check wether AutomixIQ is currently initialised, use"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQ\/initialised()","type":"reference","isActive":true}]}]}],"type":"unorderedList"}]}],"hierarchy":{"paths":[["doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/automixiq\/initialising-automixiq-with-custom-backend-article"]},{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/automixiq\/initialising-automixiq-with-custom-backend-article"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/Initialising-AutomixIQ-with-custom-backend-article"},"metadata":{"role":"article","roleHeading":"Article","title":"Initializing AutomixIQ with a custom backend","modules":[{"name":"AutomixIQ"}]},"kind":"article","sections":[],"seeAlsoSections":[{"anchor":"Initializing-AutomixIQ-for-use-with-a-custom-backend","generated":true,"title":"Initializing AutomixIQ for use with a custom backend","identifiers":["doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate","doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/TunedLogLevel"]}],"abstract":[{"type":"text","text":"How to validate your client and start using the AutomixIQ SDK with a custom backend"}],"references":{"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixIQStatusObserverDelegate":{"role":"symbol","url":"\/documentation\/automixiq\/automixiqstatusobserverdelegate","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutomixIQStatusObserverDelegate","kind":"identifier"}],"abstract":[{"text":"AutomixIQStatusObserverDelegate protocol defines the methods to be implemented with observing the status of AutomixIQ to reflect it on a UI.","type":"text"}],"navigatorTitle":[{"text":"AutomixIQStatusObserverDelegate","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStatusObserverDelegate","title":"AutomixIQStatusObserverDelegate"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixIQStreamingDelegate/getDeviceIdentifier()":{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/getDeviceIdentifier()","kind":"symbol","required":true,"type":"topic","navigatorTitle":[{"kind":"identifier","text":"getDeviceIdentifier"}],"title":"getDeviceIdentifier()","abstract":[{"type":"text","text":"Called by Automix to learn the identity of the device requesting to stream audio, for those services that require it."},{"type":"text","text":" "},{"type":"text","text":"An example would be, a service that only allows one device to stream at any one time, would need to know the identity of the device to provide the stream."}],"role":"symbol","url":"\/documentation\/automixiq\/automixiqstreamingdelegate\/getdeviceidentifier()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getDeviceIdentifier"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?"}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixIQStreamingDelegate":{"role":"symbol","kind":"symbol","abstract":[{"text":"AutomixIQStreamingDelegate protocol defines the methods to be implemented with providing AutomixIQ the information it requires to play content.","type":"text"}],"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AutomixIQStreamingDelegate"}],"title":"AutomixIQStreamingDelegate","url":"\/documentation\/automixiq\/automixiqstreamingdelegate","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutomixIQStreamingDelegate"}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixIQ/initialised()":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"initialised","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"navigatorTitle":[{"text":"initialised","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQ\/initialised()","url":"\/documentation\/automixiq\/automixiq\/initialised()","title":"initialised()","abstract":[{"text":"Returns whether or not AutomixIQ is initialised.","type":"text"}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixIQStreamingDelegate/trackDownloadProgressChanged(trackId:progress:)":{"required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"trackDownloadProgressChanged","kind":"identifier"},{"text":"(","kind":"text"},{"text":"trackId","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"progress","kind":"externalParam"},{"text":": Swift","kind":"text"},{"text":".","kind":"text"},{"text":"Float","preciseIdentifier":"s:Sf","kind":"typeIdentifier"},{"text":")","kind":"text"}],"navigatorTitle":[{"text":"trackDownloadProgressChangedWithTrackId:progress:","kind":"identifier"}],"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/trackDownloadProgressChanged(trackId:progress:)","abstract":[{"type":"text","text":"Called by AutomixIQ when a track download progress has changed."}],"title":"trackDownloadProgressChanged(trackId:progress:)","kind":"symbol","url":"\/documentation\/automixiq\/automixiqstreamingdelegate\/trackdownloadprogresschanged(trackid:progress:)","role":"symbol","type":"topic"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixIQStreamingDelegate/syncGetCachedTrack(trackId:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"syncGetCachedTrack","kind":"identifier"},{"text":"(","kind":"text"},{"text":"trackId","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":") -> ","kind":"text"},{"text":"Data","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DataV"},{"text":"?","kind":"text"}],"kind":"symbol","url":"\/documentation\/automixiq\/automixiqstreamingdelegate\/syncgetcachedtrack(trackid:)","required":true,"title":"syncGetCachedTrack(trackId:)","abstract":[{"text":"Called by AutomixIQ before attempting to download a track to allow the client to provide any cached track data, return nil if not available.","type":"text"}],"type":"topic","role":"symbol","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/syncGetCachedTrack(trackId:)","navigatorTitle":[{"text":"syncGetCachedTrackWithTrackId:","kind":"identifier"}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixIQStreamingDelegate/asyncCheckDeviceStatus(completion:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"asyncCheckDeviceStatus","kind":"identifier"},{"text":"(","kind":"text"},{"text":"completion","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"error","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"canContinuePlaying","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")","kind":"text"}],"navigatorTitle":[{"text":"asyncCheckDeviceStatusWithCompletion:","kind":"identifier"}],"required":true,"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/asyncCheckDeviceStatus(completion:)","abstract":[{"type":"text","text":"Called by AutomixIQ regularly while something is being played, this can be used if you have restrictions on the number of devices that can play simultaneously"}],"role":"symbol","title":"asyncCheckDeviceStatus(completion:)","type":"topic","url":"\/documentation\/automixiq\/automixiqstreamingdelegate\/asynccheckdevicestatus(completion:)"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ":{"kind":"symbol","title":"AutomixIQ","type":"topic","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ","role":"collection","url":"\/documentation\/automixiq","abstract":[{"type":"text","text":"Enable smooth transitions between tracks for a seamlessly beat-matched experience within your iOS music application."}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/Updating-custom-player's-UI-article":{"title":"Updating your player UI","role":"article","type":"topic","kind":"article","abstract":[{"type":"text","text":"How to create a UI to reflect the AutomixIQ player"}],"url":"\/documentation\/automixiq\/updating-custom-player's-ui-article","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/Updating-custom-player's-UI-article"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixIQStreamingDelegate/trackDownloadCompleted(trackId:data:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"trackDownloadCompleted","kind":"identifier"},{"text":"(","kind":"text"},{"text":"trackId","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"data","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"c:objc(cs)NSData","text":"NSData","kind":"typeIdentifier"},{"text":")","kind":"text"}],"navigatorTitle":[{"text":"trackDownloadCompletedWithTrackId:data:","kind":"identifier"}],"required":true,"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/trackDownloadCompleted(trackId:data:)","abstract":[{"type":"text","text":"Called by AutomixIQ when a track has been fully downloaded. This can be used to cache the track locally on the user’s device."}],"role":"symbol","title":"trackDownloadCompleted(trackId:data:)","type":"topic","url":"\/documentation\/automixiq\/automixiqstreamingdelegate\/trackdownloadcompleted(trackid:data:)"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixIQStreamingDelegate/isLoggedIn()":{"abstract":[{"text":"Called by AutomixIQ to learn if it is allowed to stream content that is protected by some form of authentication.","type":"text"},{"text":" ","type":"text"},{"text":"An example is, an implementation via an API behind OAuth would return true if access and refresh tokens are available, false otherwise","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"isLoggedIn"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"isLoggedIn()","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/isLoggedIn()","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"isLoggedIn"}],"url":"\/documentation\/automixiq\/automixiqstreamingdelegate\/isloggedin()","type":"topic","required":true,"role":"symbol"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixIQStreamingDelegate/asyncGetTrackMetadata(trackId:completion:)":{"required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"asyncGetTrackMetadata","kind":"identifier"},{"text":"(","kind":"text"},{"text":"trackId","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"text":"completion","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"error","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":"?, ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"track","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"TunedTrackModel","kind":"typeIdentifier","preciseIdentifier":"c:@M@AutomixIQ@objc(cs)TunedTrackModel"},{"text":"?) -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")","kind":"text"}],"navigatorTitle":[{"text":"asyncGetTrackMetadataWithTrackId:completion:","kind":"identifier"}],"type":"topic","title":"asyncGetTrackMetadata(trackId:completion:)","abstract":[{"text":"Called by AutomixIQ when it requires the metadata of a track in order to load it.","type":"text"}],"kind":"symbol","url":"\/documentation\/automixiq\/automixiqstreamingdelegate\/asyncgettrackmetadata(trackid:completion:)","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/asyncGetTrackMetadata(trackId:completion:)","role":"symbol"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixIQStreamingDelegate/syncGetTrackMetadata(trackId:)":{"role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"syncGetTrackMetadata","kind":"identifier"},{"text":"(","kind":"text"},{"text":"trackId","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"c:@M@AutomixIQ@objc(cs)TunedTrackModel","text":"TunedTrackModel","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[{"type":"text","text":"Called by AutomixIQ before attempting to download a tracks metadata to allow the client to provide any cached metadata, return nil if not available."}],"type":"topic","url":"\/documentation\/automixiq\/automixiqstreamingdelegate\/syncgettrackmetadata(trackid:)","title":"syncGetTrackMetadata(trackId:)","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/syncGetTrackMetadata(trackId:)","navigatorTitle":[{"text":"syncGetTrackMetadataWithTrackId:","kind":"identifier"}],"required":true},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/TunedLogLevel":{"role":"symbol","type":"topic","title":"TunedLogLevel","navigatorTitle":[{"text":"TunedLogLevel","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/automixiq\/tunedloglevel","abstract":[{"type":"text","text":"TunedLogLevel is an enum of all the AutomixIQ available log levels"}],"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/TunedLogLevel","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TunedLogLevel","kind":"identifier"}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixIQStreamingDelegate/asyncGetStream(streamingDeviceId:sessionId:trackId:completion:)":{"title":"asyncGetStream(streamingDeviceId:sessionId:trackId:completion:)","url":"\/documentation\/automixiq\/automixiqstreamingdelegate\/asyncgetstream(streamingdeviceid:sessionid:trackid:completion:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asyncGetStream"},{"kind":"text","text":"("},{"kind":"externalParam","text":"streamingDeviceId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"sessionId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"trackId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"completion"},{"kind":"text","text":": ("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"error"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"url"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"newSessionId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"type":"topic","kind":"symbol","required":true,"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate\/asyncGetStream(streamingDeviceId:sessionId:trackId:completion:)","abstract":[{"type":"text","text":"Called by AutomixIQ to obtain the URL to stream audio from, a sessionId if the URL is to be salted with one, and the URL to report playback events if required."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"asyncGetStreamWithStreamingDeviceId:sessionId:trackId:completion:"}]}},"variantOverrides":[{"patch":[{"path":"\/identifier\/interfaceLanguage","op":"replace","value":"occ"},{"path":"\/topicSections","op":"add","value":null},{"path":"\/seeAlsoSections","op":"replace","value":[{"title":"Initializing AutomixIQ for use with a custom backend","generated":true,"anchor":"Initializing-AutomixIQ-for-use-with-a-custom-backend","identifiers":["doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixIQStreamingDelegate","doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/TunedLogLevel"]}]},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStatusObserverDelegate\/title","op":"replace","value":"AutomixIQStatusObserverDelegate"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStatusObserverDelegate\/fragments","op":"replace","value":[{"text":"AutomixIQStatusObserverDelegate","kind":"identifier"}]},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStatusObserverDelegate\/navigatorTitle","op":"replace","value":[{"kind":"identifier","text":"AutomixIQStatusObserverDelegate"}]},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1getDeviceIdentifier()\/title","op":"replace","value":"getDeviceIdentifier"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1getDeviceIdentifier()\/fragments","op":"replace","value":[{"text":"- ","kind":"text"},{"text":"getDeviceIdentifier","kind":"identifier"}]},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate\/title","op":"replace","value":"AutomixIQStreamingDelegate"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate\/fragments","op":"replace","value":[{"kind":"identifier","text":"AutomixIQStreamingDelegate"}]},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate\/navigatorTitle","op":"replace","value":[{"text":"AutomixIQStreamingDelegate","kind":"identifier"}]},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQ~1initialised()\/title","value":"initialised","op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQ~1initialised()\/fragments","value":[{"text":"+ ","kind":"text"},{"text":"initialised","kind":"identifier"}],"op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1trackDownloadProgressChanged(trackId:progress:)\/title","value":"trackDownloadProgressChangedWithTrackId:progress:","op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1trackDownloadProgressChanged(trackId:progress:)\/fragments","value":[{"kind":"text","text":"- "},{"kind":"identifier","text":"trackDownloadProgressChangedWithTrackId:progress:"}],"op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1syncGetCachedTrack(trackId:)\/title","value":"syncGetCachedTrackWithTrackId:","op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1syncGetCachedTrack(trackId:)\/fragments","value":[{"text":"- ","kind":"text"},{"text":"syncGetCachedTrackWithTrackId:","kind":"identifier"}],"op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1asyncCheckDeviceStatus(completion:)\/title","value":"asyncCheckDeviceStatusWithCompletion:","op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1asyncCheckDeviceStatus(completion:)\/fragments","value":[{"kind":"text","text":"- "},{"kind":"identifier","text":"asyncCheckDeviceStatusWithCompletion:"}],"op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1trackDownloadCompleted(trackId:data:)\/title","value":"trackDownloadCompletedWithTrackId:data:","op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1trackDownloadCompleted(trackId:data:)\/fragments","value":[{"kind":"text","text":"- "},{"kind":"identifier","text":"trackDownloadCompletedWithTrackId:data:"}],"op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1isLoggedIn()\/title","value":"isLoggedIn","op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1isLoggedIn()\/fragments","value":[{"text":"- ","kind":"text"},{"text":"isLoggedIn","kind":"identifier"}],"op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1asyncGetTrackMetadata(trackId:completion:)\/title","value":"asyncGetTrackMetadataWithTrackId:completion:","op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1asyncGetTrackMetadata(trackId:completion:)\/fragments","value":[{"kind":"text","text":"- "},{"kind":"identifier","text":"asyncGetTrackMetadataWithTrackId:completion:"}],"op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1syncGetTrackMetadata(trackId:)\/title","value":"syncGetTrackMetadataWithTrackId:","op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1syncGetTrackMetadata(trackId:)\/fragments","value":[{"kind":"text","text":"- "},{"kind":"identifier","text":"syncGetTrackMetadataWithTrackId:"}],"op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1TunedLogLevel\/title","value":"TunedLogLevel","op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1TunedLogLevel\/fragments","value":[{"kind":"identifier","text":"TunedLogLevel"}],"op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1TunedLogLevel\/navigatorTitle","value":[{"text":"TunedLogLevel","kind":"identifier"}],"op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1asyncGetStream(streamingDeviceId:sessionId:trackId:completion:)\/title","value":"asyncGetStreamWithStreamingDeviceId:sessionId:trackId:completion:","op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixIQStreamingDelegate~1asyncGetStream(streamingDeviceId:sessionId:trackId:completion:)\/fragments","value":[{"kind":"text","text":"- "},{"kind":"identifier","text":"asyncGetStreamWithStreamingDeviceId:sessionId:trackId:completion:"}],"op":"replace"}],"traits":[{"interfaceLanguage":"occ"}]}]}